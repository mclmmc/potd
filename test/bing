#!/usr/bin/bash
#----------------------------------------------------------------------------#
#  Name           potd_bing                                                  #
#                                                                            #
#  Description    Get daily picture from www.bing.com                        #
#                                                                            #
#                                                                            #
#  Input          file to use as backgound                                   #
#----------------------------------------------------------------------------#

function potd_bing()
{
	local __wall=$1
	local potd=$(mktemp /tmp/potd.XXXXXXXX)
	local -A Bing
	local reqImg=""
	local reqImgURL=""
	local apiResp=""
	local json_strings=""
	local jqcmd=""
	local -i idx
	local -i json_max_elements
	local -i json_idx=0
	local -i ret=0


	local -a BING_MARKETS=('ar-XA' 'bg-BG' 'cs-CZ' 'da-DK' 'de-AT'
			       'de-CH' 'de-DE' 'el-GR' 'en-AU' 'en-CA'
			       'en-GB' 'en-ID' 'en-IE' 'en-IN' 'en-MY'
			       'en-NZ' 'en-PH' 'en-SG' 'en-US' 'en-XA'
			       'en-ZA' 'es-AR' 'es-CL' 'es-ES' 'es-MX'
			       'es-US' 'es-XL' 'et-EE' 'fi-FI' 'fr-BE'
			       'fr-CA' 'fr-CH' 'fr-FR' 'he-IL' 'hr-HR'
			       'hu-HU' 'it-IT' 'ja-JP' 'ko-KR' 'lt-LT'
			       'lv-LV' 'nb-NO' 'nl-BE' 'nl-NL' 'pl-PL'
			       'pt-BR' 'pt-PT' 'ro-RO' 'ru-RU' 'sk-SK'
			       'sl-SL' 'sv-SE' 'th-TH' 'tr-TR' 'uk-UA'
			       'zh-CN' 'zh-HK' 'zh-TW')
	local bme=$((${#BING_MARKETS[@]} -1))

	# Base URL.
	Bing[base]="http://www.bing.com"

	# API end point.
	Bing[api]="/HPImageArchive.aspx?"

	# Response Format (json|xml).
	Bing[format]="&format=js"

	# For day (0=current; 1=yesterday... so on). max value = 7
	Bing[day]="&idx=$(shuf -i0-7 -n1)"

	# Market for image.
	Bing[market]="&mkt=en-US"

	# API Constant (fetch how many). max=8
	Bing[const]="&n=8"

	# Required Image Uri.
	printf -v reqImg "%s%s%s%s%s%s" ${Bing[base]} ${Bing[api]} ${Bing[format]} ${Bing[day]} ${Bing[market]} ${Bing[const]}

	idx=$(shuf -i0-7 -n1)
	# Fetching API response.
	apiResp=$(curl -s $reqImg | jq '[.images[]]')
	if [ $? -gt 0 ]; then
		notify-send "Cannot connect to Bing server!"
		exit 1
	fi

	# Default image URL in case the required is not available.
	printf -v defImgURL "%s%s" ${Bing[base]} $(echo $apiResp | jq .[$idx].url | sed -e 's/"//g')

	# Req image url (raw).
	printf -v reqImgURL "%s%s" ${Bing[base]} $(echo $apiResp | jq .[$idx].urlbase | sed -e 's/"//g')

	# Checking if reqImgURL exists.
	curl --silent --output "$potd" --head --fail $reqImgURL
	ret=$?

	if [ $ret -ne 0 ]
	then
		curl --silent --output "$potd" $defImgURL
	fi

	ret=$?

	[ $ret -eq 0 ] && mv "$potd" $__wall || rm "$potd"

	echo $ret
}

[ -v DEBUG ] && potd_bing potd || potd_bing "$@"
